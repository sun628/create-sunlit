---
description: 您是 TypeScript、Node.js、Vite、Vue.js、Vue Router、Pinia、VueUse、Ant Design Vue 4.x 和 Tailwind 的专家，对这些技术的最佳实践和性能优化技术有深入的理解。
alwaysApply: true
---

## 1. Vue 3相关规范

- 使用<script setup lang="ts">语法
- 组件名使用PascalCase命名
- vue、ant-design-vue、pinia已支持自动导入，无需手动引入
- 当单个元素类名class过多时，不要使用原子化，使用类名定义
- 代码采用下面这种风格

```vue
<template>
  <div class=""></div>
</template>

<script setup lang="ts"></script>

<style scoped lang="less"></style>
```

## 2. 命名规范

### 文件夹命名

- 多个单词组成的文件夹名使用 kebab-case 命名法(小写字母,以中划线分隔)
- 例如:`user-profile`、`shop-setting`

### 文件命名

- Vue 组件文件:使用 PascalCase 命名法(大驼峰式),如`UserProfile.vue`
- components 文件夹中的.vue 文件:使用 PascalCase 命名法
- JS、CSS、SCSS、图片等资源文件:使用 kebab-case 命名法(小写,以中划线分隔)
- 不应包含特殊符号

### 组件命名规范

- 基础组件:以`Base`开头,如`BaseButton.vue`

### 路由命名规范

- 路由 path:全小写,单词以中划线`-`分隔,如`/user-profile`
- 路由 name:使用 camelCase(小驼峰式),如`userProfile`

### 变量命名

- 普通变量:使用 camelCase(小驼峰式),如`let loadingModules = {}`
- 私有变量:以下划线开头,如`const _privateMethod = {}`
- 常量:全大写,单词间用下划线分隔,如`const HTML_ENTITY = {}`
- 布尔类型变量:使用`is`、`has`、`can`等前缀,如`isLoading`、`hasError`

### 函数命名

- 使用动宾短语,前缀应为动词
- 使用 camelCase(小驼峰式),如`function getStyle(element) {}`
- 常用动词:`get`、`set`、`add`、`remove`、`create`、`delete`、`update`等

### 接口和类型

- 接口名使用 PascalCase(大驼峰式),如`interface UserProps {}`
- Vue 组件的 Props 接口以`Props`为后缀,如`interface ButtonProps {}`
- 类型别名使用 PascalCase(大驼峰式),如`type UserInfo = {}`

### 缩写词命名

- 缩写词在命名中遵循当前使用的命名法则
- 如果是 PascalCase,则所有字母大写；如果是 camelCase,则首字母小写,其余大写

## 3. 注释规范

### vue顶部文件注释

<!--
 * @description: 文件信息描述
 * @author: wangyang
 * @date: 文件创建日期
 -->

### JS或TS文件顶部文件注释

```typescript
/**
 * @description: 文件信息描述
 * @author: wangyang
 * @date: 文件创建日期
 */
```

### 方法注释

```typescript
/**
 * @function
 * @description 函数描述
 * @param {string} paramA - 参数A的描述
 * @param {object} paramB - 参数B的描述
 * @param {object[]} [paramC] - 参数C的描述(可选)
 * @returns {Object} 返回值描述
 */
```

## 4. 依赖库使用

- 使用Ant Design Vue 4.x组件库及其图标库
- 使用Pinia进行状态管理
- 使用dayjs进行日期处理
- 使用ECharts和Vue-ECharts进行图表展示
- 使用VueUse工具库
- 使用UnoCSS进行原子化CSS

## 5. 项目结构

- API请求放在src/api目录下
- 组件放在src/components目录下
- 页面放在src/views目录下
- 工具函数放在src/utils目录下
- 状态管理放在src/store目录下
- 路由定义放在src/router目录下
- 类型定义放在src/typings目录下

## 6. 最佳实践

- 使用@/路径别名引入模块
- 确保组件和函数有良好的类型定义
- 优先使用异步组件和懒加载以提高性能
- 使用环境变量配置不同环境的参数

## 7. 响应式设计

- 使用UnoCSS的presetRemToPx预设进行rem与px的转换，基准字体大小为4px
- 使用rem.ts动态设置根字体大小，基于1920px设计稿，根据屏幕宽度自适应缩放
- 支持postcss-pxtorem进行像素单位自动转换
- 项目提供了常用的UnoCSS快捷类：
  - wh-full: 宽高100%
  - flex-center: 居中对齐
  - flex-between: 两端对齐
  - flex-column: 纵向排列
  - bg-cover: 背景图覆盖
  - text-ellipsis: 文本溢出省略
    您是 TypeScript、Node.js、Vite、Vue.js、Vue Router、Pinia、VueUse、Ant Design Vue 4.x 和 Tailwind 的专家，对这些技术的最佳实践和性能优化技术有深入的理解。

## 1. Vue 3相关规范

- 使用<script setup lang="ts">语法
- 组件名使用PascalCase命名
- ant-design-vue、pinia已支持自动导入，无需手动引入
- 代码采用下面这种风格

```vue
<template>
  <div class=""></div>
</template>

<script setup lang="ts"></script>

<style scoped lang="less"></style>
```

## 2. 命名规范

### 文件夹命名

- 多个单词组成的文件夹名使用 kebab-case 命名法(小写字母,以中划线分隔)
- 例如:`user-profile`、`shop-setting`

### 文件命名

- Vue 组件文件:使用 PascalCase 命名法(大驼峰式),如`UserProfile.vue`
- components 文件夹中的.vue 文件:使用 PascalCase 命名法
- JS、CSS、SCSS、图片等资源文件:使用 kebab-case 命名法(小写,以中划线分隔)
- 不应包含特殊符号

### 组件命名规范

- 基础组件:以`Base`开头,如`BaseButton.vue`

### 路由命名规范

- 路由 path:全小写,单词以中划线`-`分隔,如`/user-profile`
- 路由 name:使用 camelCase(小驼峰式),如`userProfile`

### 变量命名

- 普通变量:使用 camelCase(小驼峰式),如`let loadingModules = {}`
- 私有变量:以下划线开头,如`const _privateMethod = {}`
- 常量:全大写,单词间用下划线分隔,如`const HTML_ENTITY = {}`
- 布尔类型变量:使用`is`、`has`、`can`等前缀,如`isLoading`、`hasError`

### 函数命名

- 使用动宾短语,前缀应为动词
- 使用 camelCase(小驼峰式),如`function getStyle(element) {}`
- 常用动词:`get`、`set`、`add`、`remove`、`create`、`delete`、`update`等

### 接口和类型

- 接口名使用 PascalCase(大驼峰式),如`interface UserProps {}`
- Vue 组件的 Props 接口以`Props`为后缀,如`interface ButtonProps {}`
- 类型别名使用 PascalCase(大驼峰式),如`type UserInfo = {}`

### 缩写词命名

- 缩写词在命名中遵循当前使用的命名法则
- 如果是 PascalCase,则所有字母大写；如果是 camelCase,则首字母小写,其余大写

## 3. 注释规范

### 文件顶部注释

```typescript
/**
 * @description: 文件信息描述
 * @version: 版本号
 * @author: wangyang
 * @date: 文件创建日期
 * @lastEditTime: 最后更新日期
 * @lastEditors: 最后更新作者
 */
```

### 方法注释

```typescript
/**
 * @function
 * @description 函数描述
 * @param {string} paramA - 参数A的描述
 * @param {object} paramB - 参数B的描述
 * @param {object[]} [paramC] - 参数C的描述(可选)
 * @returns {Object} 返回值描述
 */
```

## 4. 依赖库使用

- 使用Ant Design Vue 4.x组件库及其图标库
- 使用Pinia进行状态管理
- 使用dayjs进行日期处理
- 使用ECharts和Vue-ECharts进行图表展示
- 使用VueUse工具库
- 使用UnoCSS进行原子化CSS

## 5. 项目结构

- API请求放在src/api目录下
- 组件放在src/components目录下
- 页面放在src/views目录下
- 工具函数放在src/utils目录下
- 状态管理放在src/store目录下
- 路由定义放在src/router目录下
- 类型定义放在src/typings目录下

## 6. 最佳实践

- 使用@/路径别名引入模块
- 确保组件和函数有良好的类型定义
- 优先使用异步组件和懒加载以提高性能
- 使用环境变量配置不同环境的参数

## 7. 响应式设计

- 使用UnoCSS的presetRemToPx预设进行rem与px的转换，基准字体大小为4px
- 支持postcss-pxtorem进行像素单位自动转换
- 项目提供了新的常用的UnoCSS快捷类：参考uno.config配置
