---
description: 开发标准及规范
globs:
alwaysApply: true
---

### 文件夹命名

- 多个单词组成的文件夹名使用 kebab-case 命名法(小写字母,以中划线分隔)
- 例如:`user-profile`、`shop-setting`

### 文件命名

- Vue 组件文件:使用 PascalCase 命名法(大驼峰式),如`UserProfile.vue`
- components 文件夹中的.vue 文件:使用 PascalCase 命名法
- JS、CSS、SCSS、图片等资源文件:使用 kebab-case 命名法(小写,以中划线分隔)
- 不应包含特殊符号

### 组件命名规范

- 基础组件:以`Base`开头,如`BaseButton.vue`

### 路由命名规范

- 路由 path:全小写,单词以中划线`-`分隔,如`/user-profile`
- 路由 name:使用 camelCase(小驼峰式),如`userProfile`

## 注释规范

### 文件顶部注释

```vue
<!--
* @description: 文件信息描述
* @version: 版本号
* @author: 作者名
* @date: 文件创建日期
* @lastEditTime: 最后更新日期
* @lastEditors: 最后更新作者
-->
```

### JS/TS 文件注释

```typescript
/**
 * @description: 文件信息描述
 * @version: 版本号
 * @author: 作者名
 * @date: 文件创建日期
 */
```

### 方法注释

```typescript
/**
 * @function
 * @description 函数描述
 * @param {string} paramA - 参数A的描述
 * @param {object} paramB - 参数B的描述
 * @param {object[]} [paramC] - 参数C的描述(可选)
 * @returns {Object} 返回值描述
 */
```

## 命名规范

### 变量命名

- 普通变量:使用 camelCase(小驼峰式),如`let loadingModules = {}`
- 私有变量:以下划线开头,如`const _privateMethod = {}`
- 常量:全大写,单词间用下划线分隔,如`const HTML_ENTITY = {}`
- 布尔类型变量:使用`is`、`has`、`can`等前缀,如`isLoading`、`hasError`

### 函数命名

- 使用动宾短语,前缀应为动词
- 使用 camelCase(小驼峰式),如`function getStyle(element) {}`
- 常用动词:`get`、`set`、`add`、`remove`、`create`、`delete`、`update`等

### 类命名

- 类名使用 PascalCase(大驼峰式)命名法
- 类的方法/属性使用 camelCase(小驼峰式)命名法

```typescript
class TextNode {
  value: string;
  engine: any;

  constructor(value: string, engine: any) {
    this.value = value;
    this.engine = engine;
  }

  clone(): TextNode {
    return this;
  }
}
```

### 接口和类型

- 接口名使用 PascalCase(大驼峰式),如`interface UserProps {}`
- Vue 组件的 Props 接口以`Props`为后缀,如`interface ButtonProps {}`
- 类型别名使用 PascalCase(大驼峰式),如`type UserInfo = {}`

### 枚举命名

- 枚举名使用 PascalCase(大驼峰式)命名法
- 枚举值使用全大写,单词间用下划线分隔

```typescript
enum TargetState {
  READING = 1,
  READED = 2,
  APPLIED = 3,
  READY = 4
}
```

### 缩写词命名

- 缩写词在命名中遵循当前使用的命名法则
- 如果是 PascalCase,则所有字母大写；如果是 camelCase,则首字母小写,其余大写
